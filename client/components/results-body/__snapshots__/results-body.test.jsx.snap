// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ResultsBody/> should render ResultsBody and match snapshot 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResultsBody
    dispatch={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    user={
      Object {
        "fullItem": Object {
          "isActive": false,
        },
        "inputValue": "",
        "results": Object {
          "data": Array [
            Object {
              "genres": Array [
                "genre",
              ],
              "id": 123,
              "key": 123,
              "posterUrl": "url",
              "release_date": "2018-12-01",
              "title": "title",
            },
          ],
        },
        "resultsCount": -1,
        "search": "title",
        "searchInfo": Object {},
        "sort": "releaseDate",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div>
        <div
          className="results-body"
        >
          <Connect(FilmItem)
            genres="genre"
            id={123}
            posterUrl={undefined}
            title="title"
            year={2018}
          />
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="results-body"
        >
          <Connect(FilmItem)
            genres="genre"
            id={123}
            posterUrl={undefined}
            title="title"
            year={2018}
          />
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <Connect(FilmItem)
              genres="genre"
              id={123}
              posterUrl={undefined}
              title="title"
              year={2018}
            />,
          ],
          "className": "results-body",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "123",
            "nodeType": "class",
            "props": Object {
              "genres": "genre",
              "id": 123,
              "posterUrl": undefined,
              "title": "title",
              "year": 2018,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "div",
      },
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div>
          <div
            className="results-body"
          >
            <Connect(FilmItem)
              genres="genre"
              id={123}
              posterUrl={undefined}
              title="title"
              year={2018}
            />
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="results-body"
          >
            <Connect(FilmItem)
              genres="genre"
              id={123}
              posterUrl={undefined}
              title="title"
              year={2018}
            />
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <Connect(FilmItem)
                genres="genre"
                id={123}
                posterUrl={undefined}
                title="title"
                year={2018}
              />,
            ],
            "className": "results-body",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "123",
              "nodeType": "class",
              "props": Object {
                "genres": "genre",
                "id": 123,
                "posterUrl": undefined,
                "title": "title",
                "year": 2018,
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
          ],
          "type": "div",
        },
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<ResultsBody/> should render ResultsBody and match snapshot 2`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ResultsBody
    dispatch={[Function]}
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
    storeSubscription={
      Subscription {
        "listeners": Object {
          "clear": [Function],
          "get": [Function],
          "notify": [Function],
          "subscribe": [Function],
        },
        "onStateChange": [Function],
        "parentSub": undefined,
        "store": Object {
          "clearActions": [Function],
          "dispatch": [Function],
          "getActions": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
        },
        "unsubscribe": [Function],
      }
    }
    user={
      Object {
        "fullItem": Object {
          "isActive": false,
        },
        "inputValue": "",
        "results": Object {
          "data": Array [],
        },
        "resultsCount": -1,
        "search": "title",
        "searchInfo": Object {},
        "sort": "releaseDate",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <div>
        <div
          className="results-body"
        >
          <Connect(EmptyResults) />
        </div>
      </div>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <div
          className="results-body"
        >
          <Connect(EmptyResults) />
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Connect(EmptyResults) />,
          "className": "results-body",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      "type": "div",
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <div>
          <div
            className="results-body"
          >
            <Connect(EmptyResults) />
          </div>
        </div>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <div
            className="results-body"
          >
            <Connect(EmptyResults) />
          </div>,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Connect(EmptyResults) />,
            "className": "results-body",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {},
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        "type": "div",
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
